<% context.instance_eval do
  columns do
    column do
      panel "Stock Report" do
        attributes_table_for Sale do
          row "Total Product In Stock" do |d|
            status_tag Product.count, class: "normal"
          end
          row "Total Catagory" do |d|
            status_tag Catagory.count, class: "normal"
          end
          row "Total Stock" do |d|
            status_tag Product.pluck(:quantity).sum, class: "normal"
          end
        end
      end
    end
    column do
      panel "#{time} Stock Activities (Product X Quantity)" do
        attributes_table_for Product do
          row "Added Products" do |pro|
            status_tag pro.where('created_at >= ?', date).map{|e| e.quantity}.sum, class: "normal"
          end
          row "Sold Products" do |pro|
            # ProductItem.where('created_at >= ?', date).map{|e| e.quantity}.sum
            status_tag ProductItem.where('created_at >= ?', date).pluck(:quantity).sum, class: "credit"
          end
          row "Total Stock" do |pro|
            total_product = pro.pluck(:quantity).sum
            status_tag total_product, class: "total_sale"
          end
        end
      end
    end
    column do
      panel "#{time} Stock Report (Price X Quantity)" do
        attributes_table_for Product do
          row "Added Product" do |pro|
            added_product = pro.where('created_at >= ?', date).map{|e| e.unit_price * e.quantity}.sum
            status_tag number_to_currency( added_product, unit: "ETB",  format: "%n %u" ,delimiter: "", precision: 2),class: "total_sale" ,title: '(Unit Price X Quantity)'
          end
          row "Sold Product" do |pro|
            sold_product = ProductItem.where('created_at >= ?', date).map{|e| e.selling_price * e.quantity}.sum
            status_tag number_to_currency( sold_product, unit: "ETB",  format: "%n %u" ,delimiter: "", precision: 2),class: "total_sale" ,title: '(Selling Price X Quantity)' 
          end 
          row "Total Stock" do |pro|
            total_product = pro.all.map{|e| e.quantity * e.unit_price}.sum
            status_tag number_to_currency( total_product, unit: "ETB",  format: "%n %u" ,delimiter: "", precision: 2),class: "total_sale" ,title: '(Unit Price X Quantity)' 
          end 
        end
      end
    end
  end
  columns do
    column do
      panel "#{time} Stock Report Graph" do
        product =Product.where("created_at >= ?", date)

        column_chart product.group_by_day_of_week(:created_at, format: "%a").count, download: {filename: "#{Time.now.strftime("%b %d, %Y")}, Weekly Stock Report Graph"}, xtitle: "Time", ytitle: "Added Product", defer: true ,thousands: ",", messages: {empty: "There Is No Data"}
      end
    end
  end
end %>